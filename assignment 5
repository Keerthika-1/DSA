April 19 Assignment


import java.util.Arrays;
public class hw_19_April {
public static void main(String[] args) {	
int a[] = {6,3,1,4,5,1,3,7,0,2,4};
int start = 0;
int end = a.length-1;
System.out.println("Before sort : "+Arrays.toString(a));
quickSort(a,start,end);
System.out.println("After sort : "+Arrays.toString(a));
	}
private static void quickSort(int[] a, int start, int end) {
	if(start > end)
			{
				return;
			}

			else
			{
				
				int pI = partition(a,start,end);
	quickSort(a,start,pI-1);
quickSort(a,pI+1,end);
			}

		}

		private static int partition(int[] a, int start, int end) {

			int pivot = end;

			int pI = start; 

			for(int j =start;j<end;j++)
			{
		
				if(a[j] <= a[pivot])
				{
					int temp = a[j];
					a[j] = a[pI];
					a[pI] = temp;

					pI++;
				}
			}

			int temp = a[pI];
			a[pI] = a[pivot];
			a[pivot] = temp;

			return pI;

		}

	}
  ___________________________________________________________________________________________________________________________
  April 20 Assignment
  
 

import java.util.Arrays;
public class assign {
	public static void main(String[] args) {
	int a[] = { 3, 4, 1, 6, 8, 2 };
int start = 0;
int end = a.length - 1;
mergeSort(a, start, end);
System.out.println(Arrays.toString(a));
}
private static void mergeSort(int[] a, int start, int end) {
	if (start < end) {
	int mid = (start + end) / 2;
	mergeSort(a, start, mid);
	mergeSort(a, mid + 1, end);
	merge(a,start,end,mid);
		}

	}

	private static void merge(int[] a, int start, int end, int mid) {
int i = start;
int j = mid +1;
int k = 0;
int b[] = new int[a.length];
while(i<=mid && j<=end)
		{
			if(a[i] <= a[j])
			{
				b[k] = a[i];
				i++;
				k++;
			}

			else
			{
				b[k] = a[j];
				k++;
				j++;
			}
		}
			while(i>mid && j<=end)
			{
				b[k] = a[j];
				k++;
				j++;
			}

			while(j>end && i<=mid)
			{
				b[k] = a[i];
				k++;
				i++;
			}
for (int m = start; m <= end; m++) {
				a[m] = b[m-start];   
	}

	}

}
_______________________________________________________________________________________________________________________________________________________________________
April 21 Assignment 
1  "1. Given two sorted arrays, the task is to merge them in a sorted manner.

Input: arr1[] = { 1, 3, 4, 5}, arr2[] = {2, 4, 6, 8} 
Output: arr3[] = {1, 2, 3, 4, 4, 5, 6, 8}

Input: arr1[] = { 5, 8, 9}, arr2[] = {4, 7, 8} 
Output: arr3[] = {4, 5, 7, 8, 8, 9} 1.
import java.util.*;
import java.lang.*;
import java.io.*;
 
public class MergeTwoSorted
{
    public static void mergeArrays(int[] arr1, int[] arr2, int n1,
                                int n2, int[] arr3)
    {
        int i = 0, j = 0, k = 0;
     
    
        while (i<n1 && j <n2)
        {

            if (arr1[i] < arr2[j])
                arr3[k++] = arr1[i++];
            else
                arr3[k++] = arr2[j++];
        }
     

        while (i < n1)
            arr3[k++] = arr1[i++];
     
    
        while (j < n2)
            arr3[k++] = arr2[j++];
    }
     
    public static void main (String[] args)
    {
        int[] arr1 = {1, 3, 5, 7};
        int n1 = arr1.length;
     
        int[] arr2 = {2, 4, 6, 8};
        int n2 = arr2.length;
--------------------------------------------------------------------------------------------------------------------
  2. In which scenario do you use linked list and arraylist?

LinkedList should be used where modifications to a collection
	are frequent like addition/deletion operations. LinkedList is much 
	faster as compare to ArrayList in such cases. In case of read-only
	collections or collections which are rarely modified, ArrayList is suitable.

__________________________________________________________________________________________________________________________

3. Given an array of both positive and negative integers ‘arr[]’ which are sorted. The task is to sort the square of the numbers of the Array. 
Time complexity: O(n) 
space complexity: O(n) "

int arr[] = { -6, -3, -1, 2, 4, 5 };
    int n = arr.length;

    System.out.println("Before sort ");
    for (int i = 0; i < n; i++)
        System.out.print(arr[i] + " ");

    sortSquares(arr);
    System.out.println("");
    System.out.println("After Sort ");
    for (int i = 0; i < n; i++)
        System.out.print(arr[i] + " ");


	}

}
_________________________________________________________________________________________________

April 22 Assignments "
1. Create a linked list and add the following elements to it - 2,4,1,3,8,5
Search for the number 3 and display ts index

Output -> Found at 4th position
import java.util.LinkedList;
  public class SearchInALinkedList {
    public static void main(String[] args)
    {
        LinkedList<Integer> ll = new LinkedList<>();\
       ll.add(1);
        ll.add(2);
        ll.add(3);
        ll.add(4);
        ll.add(5);
        ll.add(6);
        ll.add(7);
        int element = 4;
        int ans = -1;
        for (int i = 0; i < ll.size(); i++) {
  
          
            int llElement = ll.get(i);
            if (llElement == element) {
                ans = i;
                break;
            }
        }
        
        if (ans == -1) {
            System.out.println("Element not found");
        }
        else {
            System.out.println(
                "Element found in Linked List at " + ans);
        }
    }
}
___________________________________________________________________________
2. Create a liked list and add the following elements to it - 2,4,1,3,8,5.
Add the element 20 at the end 

Output - 2,4,1,3,8,5,20"
class LinkedList
{
    Node head;  
 
  
    class Node
    {
        int data;
        Node next;
        Node(int d) {data = d; next = null; }
    }
    public void push(int new_data)
    {
        
        Node new_node = new Node(new_data);
        new_node.next = head;
        head = new_node;
    }
 
   
    public void insertAfter(Node prev_node, int new_data)
    {
        
        if (prev_node == null)
        {
            System.out.println("The given previous node cannot be null");
            return;
        }
        Node new_node = new Node(new_data);
        new_node.next = prev_node.next;
 
        prev_node.next = new_node;
    }
    

    public void append(int new_data)
    {
      
        Node new_node = new Node(new_data);
        if (head == null)
        {
            head = new Node(new_data);
            return;
        }
              make next of it as null */
        new_node.next = null;
        Node last = head;
        while (last.next != null)
            last = last.next;
        last.next = new_node;
        return;
  }
    public void printList()
    {
        Node tnode = head;
        while (tnode != null)
        {
            System.out.print(tnode.data+" ");
            tnode = tnode.next;
        }
    }
    public static void main(String[] args)
    {
       
        LinkedList llist = new LinkedList();
        llist.append(6);
        llist.push(7);
 
   
        llist.push(1);
 
  
    
        llist.append(4);
 
        llist.insertAfter(llist.head.next, 8);
 
        System.out.println("\nCreated Linked list is: ");
        llist.printList();
    }
}
_______________________________________________________________________________________________________________________________________________

April 23 Assignment

public class hw_23_April {


	static Node head;


	public static void addFirst(int data) {
		Node newNode = new Node(data);

		if(head==null) {
			head=newNode;
		}
		else {

		newNode.next=head;
		head=newNode;
		}
	}
	public static void print() {

		int cnt = 0;

		if(head==null) {
			System.out.println("Empty");
			return;
		}
		Node cur = head;

		while(cur != null) {
			System.out.print(cur.data+"->");

			if(cur.next==5) {
				System.out.println(cur.data);

			}
			cur=cur.next;
		}

		System.out.print("Null");
		System.out.println();
		System.out.println(cnt);
	}



	public static void main(String[] args) {



		addFirst(10);
		addFirst(20);
		addFirst(20);
		addFirst(40);
		addFirst(50);
		addFirst(60);
		addFirst(70);


		print();

	}

}
__________________________________________________________________________________________-_--








  
  
